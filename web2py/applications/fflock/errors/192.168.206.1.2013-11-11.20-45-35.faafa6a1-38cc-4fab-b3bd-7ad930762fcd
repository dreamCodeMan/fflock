(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'bgcolor' referenced before assignment"
p3
sS'layer'
p4
S'/mnt/hgfs/fflock/modules/web2py/applications/fflock/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\n\nimport sys\nimport os\nsys.path.append(os.path.abspath(\'./../../\'))\nfrom modules import fflock_globals\nfrom modules import fflock_utility\n\n\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n\ndef index():\n    return dict(message="Index")\n\ndef submit():\n    form = FORM(TABLE(TR("Job Type:", SELECT(\'Transcode\', \'Custom\', _name="jobtype", requires=IS_IN_SET([\'Transcode\', \'Custom\']))),\n                    TR("Input:", INPUT(_type="text", _name="input", requires=IS_NOT_EMPTY())),\n                    TR("Output", INPUT(_type="text", _name="output", requires=IS_NOT_EMPTY())),\n                    TR("Pre-Options:", INPUT(_type="text", _name="preoptions")),\n                    TR("Options", INPUT(_type="text", _name="options")),\n                    TR("Encoder", SELECT(\'ffmpeg\', \'ffmbc\', \'avconv\', _name="encoder", requires=IS_IN_SET([\'ffmpeg\', \'ffmbc\', \'avconv\']))),\n                    TR("Compare Frame Count", INPUT(_type="checkbox", _name="framecount")),\n                    TR("", INPUT(_type="submit", _value="SUBMIT"))))\n\n    if form.accepts(request, session):\n        response.flash = "form accepted"\n\n    elif form.errors:\n        response.flash = "form is invalid"\n    else:\n        response.flash = "please fill the form"\n\n    return dict(form=form, vars=form.vars)\n\n\ndef status():\n    return dict()\n\ndef status_data_servers():\n\n    warning_color = "#FFC100"\n    ok_color = "#B4FFC7"\n    busy_color = "#FF0000"\n    idle_color = "#000000"\n\n    #servers = SQLTABLE(db().select(db.Servers.ServerType, db.Servers.State), headers=\'fieldname:capitalize\')\n    #servers = SQLFORM.grid(db.Servers, searchable=False, details=False, sortable=False, csv=False, formstyle="divs")\n    servers = db(db.Servers).select()\n    table = ""\n    if 0:\n        print "agfsfl"\n        for server in servers.sort(lambda server: server.ServerType):\n            bgcolor = ok_color\n            statecolor = idle_color\n            if server.State == 1: statecolor = busy_color\n            if server.ServerType == "Slave":\n                bgcolor = warning_color\n                connectivity = db(db.Connectivity.SlaveServerUUID == server.UUID).select()\n                for connection in connectivity:\n                    if connection.Connected == 1:\n                        bgcolor = ok_color\n            if server.ServerType == "Storage":\n                bgcolor = warning_color\n                storage = db(db.Storage.ServerUUID == server.UUID).select()\n                for share in storage:\n                    bgcolor = ok_color\n            table = table + "<div ALIGN=\'left\' STYLE=\'background:%s; color:%s; font-variant: small-caps;\'>" % (bgcolor, statecolor) + server.ServerType + " @ " + server.LocalIP + " (" + server.PublicIP + ")</div>"\n    else:\n        table = "<div ALIGN=\'left\' STYLE=\'background:%s; color:%s; font-variant: small-caps;\'>" % (bgcolor, statecolor) + "No servers currently running</div>"\n    return table\n\ndef status_data_jobs():\n    jobs = SQLTABLE(db().select(db.Jobs.JobType, db.Jobs.JobSubType, db.Jobs.JobInput, db.Jobs.JobOutput, db.Jobs.State, db.Jobs.Assigned, db.Jobs.Progress), headers=\'fieldname:capitalize\')\n    #jobs = SQLFORM.grid(db.Jobs, searchable=False, details=False, sortable=False, csv=False)\n    return jobs.xml()\n\ndef status_data_storage():\n    storage = SQLTABLE(db().select(db.Storage.StorageType, db.Storage.LocalPathNFS, db.Storage.PublicPathNFS), headers=\'fieldname:capitalize\')\n    #storage = SQLFORM.grid(db.Storage, searchable=False, details=False, sortable=False, csv=False)\n    return storage.xml()\n\ndef status_data_connectivity():\n    connectivity = SQLTABLE(db().select(db.Connectivity.ALL), headers=\'fieldname:capitalize\')\n    #connectivity = SQLFORM.grid(db.Connectivity, searchable=False, details=False, sortable=False, csv=False)\n    return connectivity.xml()\n\ndef manage():\n    return dict(message="manage")\n\n\ndef help():\n    return dict(message="help")\n\n\ndef error():\n    return dict()\n\nresponse._vars=response._caller(status_data_servers)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/mnt/hgfs/fflock/modules/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/mnt/hgfs/fflock/modules/web2py/applications/fflock/controllers/default.py", line 102, in <module>\n  File "/mnt/hgfs/fflock/modules/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/mnt/hgfs/fflock/modules/web2py/applications/fflock/controllers/default.py", line 73, in status_data_servers\n    table = "<div ALIGN=\'left\' STYLE=\'background:%s; color:%s; font-variant: small-caps;\'>" % (bgcolor, statecolor) + "No servers currently running</div>"\nUnboundLocalError: local variable \'bgcolor\' referenced before assignment\n'
p11
s.