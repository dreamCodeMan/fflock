(dp1
S'output'
p2
S'<class \'_mysql_exceptions.OperationalError\'> (1050, "Table \'auth_user\' already exists")'
p3
sS'layer'
p4
S'/mnt/hgfs/fflock/web2py/applications/fflock/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nimport sys\nimport os\nsys.path.append(os.path.abspath(\'./../\'))\nfrom modules import fflock_globals\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    #db = DAL(\'sqlite://storage.sqlite\',pool_size=1,check_reserved=[\'all\'])\n\n    sqlconn_string = "mysql://" + fflock_globals.DATABASE_USER + ":" + fflock_globals.DATABASE_PASSWD + "@"\\\n                     + fflock_globals.DATABASE_HOST + ":" + str(fflock_globals.DATABASE_PORT) + "/"\\\n                     + fflock_globals.DATABASE_NAME\n    db = DAL(sqlconn_string)\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'you@gmail.com\'\nmail.settings.login = \'username:password\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth, filename=\'private/janrain.key\')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\ndb.define_table(\n    \'Servers\',\n    Field(\'UUID\', \'string\'),\n    Field(\'ServerType\', \'string\'),\n    Field(\'State\', \'integer\'),\n    Field(\'LocalIP\', \'string\'),\n    Field(\'PublicIP\', \'string\'),\n    Field(\'LastSeen\', \'datetime\'),\n    migrate=False\n)\n\ndb.define_table(\n    \'Storage\',\n    Field(\'UUID\', \'string\'),\n    Field(\'ServerUUID\', \'string\'),\n    Field(\'StorageType\', \'string\'),\n    Field(\'LocalPathNFS\', \'string\'),\n    Field(\'PublicPathNFS\', \'string\'),\n    migrate=False\n)\n\ndb.define_table(\n    \'Connectivity\',\n    Field(\'SlaveServerUUID\', \'string\'),\n    Field(\'StorageUUID\', \'string\'),\n    Field(\'Latency\', \'integer\'),\n    Field(\'IPType\', \'string\'),\n    Field(\'Connected\', \'integer\'),\n    migrate=False\n)\n\ndb.define_table(\n    \'Jobs\',\n    Field(\'JobType\', \'string\'),\n    Field(\'JobSubType\', \'string\'),\n    Field(\'Command\', \'string\'),\n    Field(\'CommandPreOptions\', \'string\'),\n    Field(\'CommandOptions\', \'string\'),\n    Field(\'JobInput\', \'string\'),\n    Field(\'JobOutput\', \'string\'),\n    Field(\'Assigned\', \'integer\'),\n    Field(\'State\', \'integer\'),\n    Field(\'Progress\', \'integer\'),\n    Field(\'Priority\', \'integer\'),\n    Field(\'ResultValue1\', \'string\'),\n    Field(\'ResultValue2\', \'string\'),\n    Field(\'Dependencies\', \'string\'),\n    Field(\'UUID\', \'string\'),\n    Field(\'AssignedServerUUID\', \'string\'),\n    Field(\'StorageUUID\', \'string\'),\n    Field(\'MasterUUID\', \'string\'),\n    Field(\'AssignedTime\', \'datetime\'),\n    Field(\'CreatedTime\', \'datetime\'),\n    Field(\'FinishedTime\', \'datetime\'),\n    migrate=False\n)\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/mnt/hgfs/fflock/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/mnt/hgfs/fflock/web2py/applications/fflock/models/db.py", line 57, in <module>\n    auth.define_tables(username=False, signature=False)\n  File "/mnt/hgfs/fflock/web2py/gluon/tools.py", line 1736, in define_tables\n    format=\'%(first_name)s %(last_name)s (%(id)s)\'))\n  File "/mnt/hgfs/fflock/web2py/gluon/dal.py", line 7935, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/mnt/hgfs/fflock/web2py/gluon/dal.py", line 7972, in lazy_define_table\n    polymodel=polymodel)\n  File "/mnt/hgfs/fflock/web2py/gluon/dal.py", line 1002, in create_table\n    self.create_sequence_and_triggers(query,table)\n  File "/mnt/hgfs/fflock/web2py/gluon/dal.py", line 1819, in create_sequence_and_triggers\n    self.execute(query)\n  File "/mnt/hgfs/fflock/web2py/gluon/dal.py", line 1836, in execute\n    return self.log_execute(*a, **b)\n  File "/mnt/hgfs/fflock/web2py/gluon/dal.py", line 1830, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/usr/lib64/python2.6/site-packages/MySQLdb/cursors.py", line 173, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/lib64/python2.6/site-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nOperationalError: (1050, "Table \'auth_user\' already exists")\n'
p11
s.